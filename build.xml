<?xml version="1.0" encoding="UTF-8"?>

<project name="nakade" default="full-suite" basedir=".">

    <!-- GLOBAL VARIABLES -->
    <property name="deployDir" value="/var/www/produkt" />
    <!-- END -->

    <!-- AVAILABLE COMMANDS -->
    <target name="full-suite" depends="date, analysis, createAssets, copyToDeploy" />
    <!-- END -->

    <!-- ANALYSIS -->
    <target name="analysis"
            depends="prepare, lint,phploc,pdepend, phpmd, phpcs, phpcpd, composer, phpunit, phpdox, -check-failure"
            description="Performs static analysis" />
    <!-- END -->

    <!-- DATE -->
    <target name="date">
        <echo message="Printing system date ..."/>
        <exec executable="date" />
    </target>
    <!-- END -->

    <!-- CLEAN -->
    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdox"/>
        <property name="clean.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PREPARE -->
    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <echo message="Create build directories ..." />
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>
    <!-- END -->

    <!-- LINT -->
    <target name="lint"
            unless="lint.done"
            description="Perform syntax check of sourcecode files">
        <echo message="Checking php syntax ..." />
        <apply executable="php" taskname="lint" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
        <property name="lint.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PHPLOC -->
    <target name="phploc"
            unless="phploc.done"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within
             a continuous integration environment.">
        <echo message="Measure project size ..." />
        <exec executable="phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/build/logs/phploc.xml" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>
        <property name="phploc.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PDEPEND -->
    <target name="pdepend"
            unless="pdepend.done"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within
             a continuous integration environment.">
        <echo message="Calculate software metrics ..." />
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>
        <property name="pdepend.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PHPCS -->
    <target name="phpcs"
            unless="phpcs.done"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <echo message="Check coding style ..." />
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/build/phpcs.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>
    <!-- END -->

        <!-- PHPMD -->
    <target name="phpmd"
            unless="phpmd.done"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <echo message="Mess detection ..." />
        <exec executable="phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg path="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${basedir}/build/logs/pmd.xml" />
        </exec>
        <property name="phpmd.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PHPCPD -->
    <target name="phpcpd"
            unless="phpcpd.done"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <echo message="Copy and paste detection ..." />
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg path="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>
    <!-- END -->

    <!-- COMPOSER -->
    <target name="composer" unless="composer.done" description="Install Vendor code ...">
        <echo message="Running composer self-update ..." />
        <exec executable="/var/lib/jenkins/composer">
            <arg value="self-update" />
        </exec>
        <echo message="Running composer install ..." />
        <exec executable="/var/lib/jenkins/composer" failonerror="true">
            <arg value="install" />
            <arg value="--no-interaction" />
        </exec>
        <property name="composer.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PHPUNIT -->
    <target name="phpunit" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit">
        <echo message="Unit tests ..." />
        <exec executable="${basedir}/vendor/bin/simple-phpunit" resultproperty="result.phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml.dist"/>
            <arg value="--coverage-xml"/>
            <arg path="${basedir}/build/logs/coverage"/>
            <arg value="--coverage-clover"/>
            <arg path="${basedir}/build/logs/clover.xml"/>
            <arg value="--coverage-crap4j"/>
            <arg path="${basedir}/build/logs/crap4j.xml"/>
            <arg value="--log-junit"/>
            <arg path="${basedir}/build/logs/junit.xml"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PHPUNIT CHECK FAILURE -->
    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>
    <!-- END -->

    <!-- PHPDOX -->
    <target name="phpdox" unless="phpdox.done" depends="phploc,phpcs, phpmd"
            description="Generate project documentation using phpDox">
        <echo message="Generate documentation ..." />
        <exec executable="phpdox" dir="${basedir}/build"/>

        <property name="phpdox.done" value="true"/>
    </target>
    <!-- END -->

    <!-- YARN -->
    <target name="yarn"
            unless="install.done"
            description="Install Yarn">
        <echo message="Install Yarn ..." />
        <exec executable="yarn">
            <arg value="install"/>
        </exec>

        <property name="install.done" value="true"/>
    </target>
    <!-- YARN & ASSETS -->

    <!-- YARN & ASSETS -->
    <target name="createAssets"
            depends="yarn"
            unless="createAssets.done"
            description="Compile assets on production build">
        <echo message="Compile assets ..." />
        <exec executable="yarn">
            <arg value="encore"/>
            <arg value="production"/>
        </exec>

        <property name="createAssets.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PREPARE -->
    <target name="createDir"
            unless="createDir.done"
            description="Create directory to deploy">
        <echo message="Create new deploy directory ..." />
        <mkdir dir="/var/www/produkt/neu"/>
        <property name="createDir.done" value="true"/>
    </target>
    <!-- END -->

    <!-- COPY FILES -->
    <target name="copyToDeploy" depends="createDir" description="Copy files to deploy folder.">
        <copy todir="/var/www/produkt/neu">
            <fileset dir="${basedir}">
                <include name="**" />
                <exclude name="**/_*/**" /> <!-- ignore files/folders starting with underscore -->
                <exclude name="**/.git" />
                <exclude name="**/tests" />
                <exclude name="**/assets" />
                <exclude name="build.xml" />
            </fileset>
        </copy>
    </target>
    <!-- END -->


</project>