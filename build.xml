<?xml version="1.0" encoding="UTF-8"?>

<project name="nakade" default="full-suite" basedir=".">

    <!-- GLOBAL VARIABLES -->
    <property name="deployDir" value="/var/www/projekt/nakade" />
    <property name="saveDir" value="/var/www/projekt/LAST" />
    <!-- version -->
    <property name="MINOR" value="2"/>


    <!-- AVAILABLE COMMANDS -->
    <target name="full-suite" depends="date, start, composer, analysis, delivery, finalize" />
    <!-- END -->

    <!-- DEPLOYMENT -->
    <target name="delivery" depends="createAssets, clearCache, version, moveOldVersion, copyToDeploy" />
    <!-- END -->

    <!-- FINALIZE -->
    <target name="finalize" depends="fileRightsFinal, migration, clearCacheFinal, chgOwnerProductFiles, finish" />
    <!-- END -->

    <!-- ANALYSIS -->
    <target name="analysis"
            depends="prepare, lint,phploc,pdepend, phpmd, phpcs, phpcpd, phpdox"
            description="Performs static analysis" />
    <!-- END -->

    <!-- DATE -->
    <target name="date">
        <echo message="Printing system date ..."/>
        <exec executable="date" />
    </target>
    <!-- END -->

    <!-- START -->
    <target name="start" description="Start script for enabling working site.">
        <echo message="Toogle Website"/>
        <exec executable="startJob.sh" />
    </target>
    <!-- END -->

    <!-- CLEAN -->
    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <property environment="env" />
        <delete dir="${env.WORKSPACE}/build/api"/>
        <delete dir="${env.WORKSPACE}/build/coverage"/>
        <delete dir="${env.WORKSPACE}/build/logs"/>
        <delete dir="${env.WORKSPACE}/build/pdepend"/>
        <delete dir="${env.WORKSPACE}/build/phpdox"/>
        <property name="clean.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PREPARE -->
    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <property environment="env" />
        <echo message="Create build directories ..." />
        <mkdir dir="${env.WORKSPACE}/build/api"/>
        <mkdir dir="${env.WORKSPACE}/build/coverage"/>
        <mkdir dir="${env.WORKSPACE}/build/logs"/>
        <mkdir dir="${env.WORKSPACE}/build/pdepend"/>
        <mkdir dir="${env.WORKSPACE}/build/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>
    <!-- END -->

    <!-- LINT -->
    <target name="lint"
            unless="lint.done"
            description="Perform syntax check of sourcecode files">
        <echo message="Checking php syntax ..." />
        <property environment="env" />
        <apply executable="php" taskname="lint" failonerror="true">
            <arg value="-l" />

            <fileset dir="${env.WORKSPACE}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${env.WORKSPACE}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
        <property name="lint.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PHPLOC -->
    <target name="phploc"
            unless="phploc.done"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within
             a continuous integration environment.">
        <echo message="Measure project size ..." />
        <property environment="env" />
        <exec executable="phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${env.WORKSPACE}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${env.WORKSPACE}/build/logs/phploc.xml" />
            <arg path="${env.WORKSPACE}/src" />
            <arg path="${env.WORKSPACE}/tests" />
        </exec>
        <property name="phploc.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PDEPEND -->
    <target name="pdepend"
            unless="pdepend.done"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within
             a continuous integration environment.">
        <echo message="Calculate software metrics ..." />
        <property environment="env" />
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${env.WORKSPACE}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${env.WORKSPACE}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${env.WORKSPACE}/build/pdepend/overview-pyramid.svg" />
            <arg path="${env.WORKSPACE}/src" />
        </exec>
        <property name="pdepend.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PHPCS -->
    <target name="phpcs"
            unless="phpcs.done"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <echo message="Check coding style ..." />
        <property environment="env" />
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${env.WORKSPACE}/build/logs/checkstyle.xml" />
            <arg value="--standard=${env.WORKSPACE}/build/phpcs.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${env.WORKSPACE}/src" />
            <arg path="${env.WORKSPACE}/tests" />
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>
    <!-- END -->

        <!-- PHPMD -->
    <target name="phpmd"
            unless="phpmd.done"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <echo message="Mess detection ..." />
        <property environment="env" />
        <exec executable="phpmd">
            <arg path="${env.WORKSPACE}/src" />
            <arg value="xml" />
            <arg path="${env.WORKSPACE}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${env.WORKSPACE}/build/logs/pmd.xml" />
        </exec>
        <property name="phpmd.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PHPCPD -->
    <target name="phpcpd"
            unless="phpcpd.done"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <echo message="Copy and paste detection ..." />
        <property environment="env" />
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg path="${env.WORKSPACE}/build/logs/pmd-cpd.xml" />
            <arg path="${env.WORKSPACE}/src" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>
    <!-- END -->

    <!-- COMPOSER -->
    <target name="composer"
            unless="composer.done"
            description="Install Vendor code ...">
        <echo message="Running composer self-update ..." />
        <exec executable="/var/lib/jenkins/composer">
            <arg value="self-update" />
        </exec>
        <echo message="Running composer install ..." />
        <exec executable="/var/lib/jenkins/composer">
            <arg value="install" />
            <arg value="--no-interaction" />
            <arg value="--optimize-autoloader" />
        </exec>
        <property name="composer.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PHPUNIT -->
    <target name="phpunit"
            unless="phpunit.done"
            if="composer.done"
            depends="prepare"
            description="Run unit tests with PHPUnit">
        <echo message="Unit tests ..." />
        <property environment="env" />
        <exec executable="${env.WORKSPACE}/vendor/bin/simple-phpunit" resultproperty="result.phpunit">
            <arg value="--configuration"/>
            <arg path="${env.WORKSPACE}/phpunit.xml.dist"/>
            <arg value="--coverage-xml"/>
            <arg path="${env.WORKSPACE}/build/logs/coverage"/>
            <arg value="--coverage-clover"/>
            <arg path="${env.WORKSPACE}/build/logs/clover.xml"/>
            <arg value="--coverage-crap4j"/>
            <arg path="${env.WORKSPACE}/build/logs/crap4j.xml"/>
            <arg value="--log-junit"/>
            <arg path="${env.WORKSPACE}/build/logs/junit.xml"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>
    <!-- END -->

    <!-- PHPUNIT CHECK FAILURE -->
    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>
    <!-- END -->

    <!-- PHPDOX -->
    <target name="phpdox" unless="phpdox.done" depends="phploc,phpcs, phpmd"
            description="Generate project documentation using phpDox">
        <property environment="env" />
        <echo message="Generate documentation ..." />
        <exec executable="phpdox" dir="${env.WORKSPACE}/build"/>

        <property name="phpdox.done" value="true"/>
    </target>
    <!-- END -->

   <!-- YARN -->
    <target name="yarn"
            if="composer.done"
            unless="yarn.done"
            description="Install Yarn">
        <echo message="Install Yarn ..." />
        <exec executable="yarn">
            <arg value="install"/>
        </exec>

        <property name="yarn.done" value="true"/>
    </target>
    <!-- YARN & ASSETS -->

    <!-- YARN & ASSETS -->
    <target name="createAssets"
            depends="yarn"
            if="yarn.done"
            unless="createAssets.done"
            description="Compile assets on production build">
        <echo message="Compile assets ..." />
        <exec executable="yarn">
            <arg value="build"/>
        </exec>

        <property name="createAssets.done" value="true"/>
    </target>
    <!-- END -->

    <!-- CLEAR CACHE -->
    <target name="clearCache"
            unless="cache.done"
            description="Clear cache in workspace ...">
        <echo message="Clear Cache ..." />
        <property environment="env" />
        <exec executable="php">
            <arg path="bin/console"/>
            <arg value="cache:clear"/>
        </exec>
        <property name="cache.done" value="true"/>
    </target>
    <!-- END -->

    <!--VERSION PROPERTIES-->
    <target name="version" unless="version.done" description="Generate project version">
        <property environment="env" />
        <property name="VERSION" value="v3.${MINOR}.${env.APP_VERSION}" />
        <echo message="Generate version bump ...${VERSION}" />
        <exec executable="${env.WORKSPACE}/version-bump.sh">
            <arg value="${VERSION}"/>
        </exec>
        <property name="version.done" value="true"/>
    </target>
    <!-- END -->

    <!-- CREATE LAST VERSION DIR -->
    <target name="createLastDir"
            unless="createLastDir.done"
            description="Create directory to save last version">
        <echo message="Create last version directory ..." />
        <mkdir dir="${saveDir}"/>
        <property name="createLastDir.done" value="true"/>
    </target>
    <!-- END -->

    <!-- DELETE LAST VERSION DIR -->
    <target name="deleteLastDir"
            depends="createLastDir"
            if="createAssets.done"
            unless="deleteLastDir.done"
            description="Delete directory of previous last version">
        <echo message="Remove previous last version directory ..." />

        <delete includeemptydirs="true">
            <fileset dir="${saveDir}" includes="**/*"/>
        </delete>
        <property name="deleteLastDir.done" value="true"/>
    </target>
    <!-- END -->

    <!-- FILE OWNERSHIP OLD FILES -->
    <target name="chgOwnerOldFiles"
            unless="chgOwnerOldFiles.done"
            description="Change owner of files in product before moving...">
        <echo message="Change rights for www-data ..." />
        <exec executable="changeJenkinsOwner.sh">
            <arg path="${deployDir}"/>
        </exec>
        <property name="chgOwnerOldFiles.done" value="true"/>
    </target>
    <!-- END -->

    <!-- MOVE OLD FILES -->
    <target name="moveOldVersion"
            depends="deleteLastDir, chgOwnerOldFiles"
            unless="moveOldVersion.done"
            description="Move old version.">
        <property environment="env" />
        <echo message="Move previous version to ${saveDir} ..." />
        <move todir="${saveDir}" includeemptydirs="true" overwrite="true">
            <fileset dir="${deployDir}" >
                <exclude name="**/var/log/**"/>
                <exclude name=".env.local"/>
            </fileset>
        </move>
        <property name="moveOldVersion.done" value="true"/>
    </target>
    <!-- END -->

    <!-- CREATE PROJECT DIR -->
    <target name="createDeployDir"
            unless="createDeployDir.done"
            description="Create directory to deliver product">
        <echo message="Create product directory if not existent ..." />
        <mkdir dir="${deployDir}" />
        <property name="createDeployDir.done" value="true"/>
    </target>
    <!-- END -->

    <!-- DEPLOY FILES -->
    <target name="copyToDeploy"
            depends="createDeployDir"
            unless="copyToDeploy.done"
            description="Copy files to deploy folder.">
        <property environment="env" />
        <echo message="Copy all files from ${env.WORKSPACE} to ${deployDir} ..." />
        <copy todir="${deployDir}" includeemptydirs="true" overwrite="true">
            <fileset dir="${env.WORKSPACE}">
                <include name="**"/>
                <exclude name="**/assets/**"/>
                <exclude name="**/tests/**"/>
                <exclude name="**/phpunit.xml.dist"/>
                <exclude name="**/*.sh"/>
                <exclude name="**/.env.test"/>
            </fileset>
        </copy>
        <property name="copyToDeploy.done" value="true"/>
    </target>
    <!-- END -->

    <!-- FILE RIGHTS WORKSPACE -->
    <target name="fileRightsFinal"
            unless="fileRightsFinal.done"
            description="Change rights of files in prod ...">
        <echo message="Change rights for www-data ..." />
        <exec executable="fileRights.sh">
            <arg path="${deployDir}"/>
        </exec>
        <property name="fileRightsFinal.done" value="true"/>
    </target>
    <!-- END -->

    <!-- MIGRATION -->
    <target name="migration"
            unless="migration.done"
            description="database migrations ...">
        <echo message="Migrate database data ..." />
        <exec executable="php">
            <arg path="${deployDir}/bin/console"/>
            <arg value="doctrine:migrations:migrate"/>
        </exec>
        <property name="migration.done" value="true"/>
    </target>
    <!-- END -->

    <!-- CLEAR CACHE -->
    <target name="clearCacheFinal"
            unless="clearCacheFinal.done"
            description="Clear cache in prod environment ...">
        <echo message="Clear Cache ..." />
        <exec executable="php">
            <arg path="${deployDir}/bin/console"/>
            <arg value="cache:clear"/>
        </exec>
        <property name="clearCacheFinal.done" value="true"/>
    </target>
    <!-- END -->

    <!-- FILE OWNERSHIP PRODUCT FILES -->
    <target name="chgOwnerProductFiles"
            unless="chgOwnerProductFiles.done"
            description="Change owner of production files ...">
        <echo message="Change rights for www-data ..." />
        <exec executable="changeApacheOwner.sh">
            <arg path="${deployDir}"/>
            <arg path="www-data"/>
        </exec>
        <property name="chgOwnerProductFiles.done" value="true"/>
    </target>
    <!-- END -->

    <!-- FINISH -->
    <target name="finish" description="Finish script for enabling nakade site.">
        <echo message="Toogle Website"/>
        <exec executable="finishJob.sh" />
    </target>
    <!-- END -->

</project>